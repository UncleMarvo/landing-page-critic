// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Removed the custom output to avoid DLL locking issues
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?   // Null for OAuth users
  name              String?
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // OAuth fields
  oauthProvider     String?   // 'google', 'github', etc.
  oauthId           String?   // ID from OAuth provider
  
  // Email verification
  verificationToken String?   @unique
  verificationExpires DateTime?
  
  // Password reset
  resetToken        String?   @unique
  resetExpires      DateTime?
  
  // Subscription fields
  tier              String    @default("free") // 'free', 'basic', 'pro'
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  subscriptionStatus String   @default("inactive") // 'active', 'canceled', 'past_due', 'incomplete', 'incomplete_expired', 'trialing', 'unpaid'
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean   @default(false)
  
  // Usage tracking fields
  analysesUsed      Int       @default(0)
  aiInsightsUsed    Int       @default(0)
  exportReportsUsed Int       @default(0)
  scheduledReportsUsed Int    @default(0)
  
  // Scheduled reports configuration
  scheduledReportsEnabled Boolean @default(false)
  scheduledReportsFrequency String? // 'weekly', 'monthly'
  scheduledReportsEmail String?
  scheduledReportsUrls Json? // Array of URLs to include in reports
  
  // Relations
  auditResults      AuditResult[]
  history           History[]
  aiInsights        AIInsight[]
  userActions       UserAction[]
  invoices          Invoice[]
  
  @@index([email])
  @@index([oauthProvider, oauthId])
  @@index([tier])
  @@index([subscriptionStatus])
}

model AuditResult {
  id          String   @id @default(cuid())
  url         String
  createdAt   DateTime @default(now())
  categories  Json
  webVitals   Json
  opportunities Json
  recommendations Json
  accessibility Json
  
  // Add user relation
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
  id              Int              @id @default(autoincrement())
  url             String
  analyzedAt      DateTime         @default(now())
  
  // Category Scores (Lighthouse categories)
  performance     Int
  accessibility   Int
  seo             Int
  bestPractices   Int
  
  // Web Vitals
  lcp             Float?
  cls             Float?
  inp             Float?
  fcp             Float?
  ttfb            Float?
  
  // Performance Metrics (additional metrics)
  speedIndex     Float?
  totalBlockingTime Float?
  largestContentfulPaint Float?
  cumulativeLayoutShift Float?
  firstInputDelay Float?
  
  // User relation
  userId          String?
  user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Site identification for multi-site tracking
  siteId          String? // Optional site identifier for grouping
  
  // Relations
  details         HistoryDetails?
  aiInsights      AIInsight[] // Link AI insights to this analysis
  analysisData    AnalysisData? // Link to comprehensive analysis data
  
  @@index([url])
  @@index([userId])
  @@index([analyzedAt])
  @@index([siteId])
}

model HistoryDetails {
  id            Int     @id @default(autoincrement())
  historyId     Int     @unique
  lhr           Json

  history       History @relation(fields: [historyId], references: [id], onDelete: Cascade)
}

model AIInsight {
  id              String   @id @default(cuid())
  url             String
  title           String
  description     String
  severity        String   // 'High', 'Medium', 'Low'
  category        String   // 'Performance', 'Accessibility', 'SEO', 'Best Practices', 'Web Vitals'
  actionable      Boolean  @default(true)
  estimatedImpact String
  priority        Int      @default(5)
  status          String   @default("pending") // 'pending', 'applied', 'ignored'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Enhanced fields for historical context
  historicalContext String? // JSON string for historical context
  platformSpecific Boolean @default(false)
  platforms        Json?   // Array of platform names
  implementationSteps Json? // Array of implementation steps
  expectedTimeline String?
  costBenefit      String?

  // Relations
  userId          String?
  user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Link to specific analysis
  historyId       Int?
  history         History? @relation(fields: [historyId], references: [id], onDelete: Cascade)

  // User actions on this insight
  userActions     UserAction[]

  @@index([url])
  @@index([status])
  @@index([severity])
  @@index([category])
  @@index([historyId])
  @@index([userId])
}

// New model for tracking user actions on AI insights
model UserAction {
  id          String   @id @default(cuid())
  userId      String
  insightId   String
  action      String   // 'applied', 'ignored'
  impact      String?  // Optional impact assessment
  url         String   // URL for context
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  insight     AIInsight @relation(fields: [insightId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([insightId])
  @@index([url])
  @@index([action])
  @@index([createdAt])
}

// New model for storing comprehensive analysis data
model AnalysisData {
  id              String   @id @default(cuid())
  historyId       Int      @unique
  history         History  @relation(fields: [historyId], references: [id], onDelete: Cascade)
  
  // Opportunities data
  opportunities   Json     // Array of opportunity objects
  
  // Recommendations data  
  recommendations Json     // Array of recommendation objects
  
  // Accessibility issues
  accessibility   Json     // Array of accessibility issues
  
  // Best practices violations
  bestPractices   Json     // Array of best practices issues
  
  // SEO issues
  seo             Json     // Array of SEO issues
  
  // Performance details
  performanceDetails Json  // Detailed performance metrics
  
  // Platform information
  platforms       Json     // Array of platforms used for analysis
  consolidatedData Json    // Full consolidated data from all platforms
  
  createdAt       DateTime @default(now())
  
  @@index([historyId])
}

// Invoice model for billing history
model Invoice {
  id                String   @id @default(cuid())
  stripeInvoiceId   String   @unique
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  status            String   // 'draft', 'open', 'paid', 'uncollectible', 'void'
  invoicePdf        String?  // URL to PDF
  hostedInvoiceUrl  String?  // URL to hosted invoice
  createdAt         DateTime @default(now())
  
  // User relation
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}