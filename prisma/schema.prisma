// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // Removed the custom output to avoid DLL locking issues
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?   // Null for OAuth users
  name              String?
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // OAuth fields
  oauthProvider     String?   // 'google', 'github', etc.
  oauthId           String?   // ID from OAuth provider
  
  // Email verification
  verificationToken String?   @unique
  verificationExpires DateTime?
  
  // Password reset
  resetToken        String?   @unique
  resetExpires      DateTime?
  
  // Relations
  auditResults      AuditResult[]
  history           History[]
  aiInsights        AIInsight[]
  
  @@index([email])
  @@index([oauthProvider, oauthId])
}

model AuditResult {
  id          String   @id @default(cuid())
  url         String
  createdAt   DateTime @default(now())
  categories  Json
  webVitals   Json
  opportunities Json
  recommendations Json
  accessibility Json
  
  // Add user relation
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
  id              Int              @id @default(autoincrement())
  url             String
  analyzedAt      DateTime         @default(now())
  performance     Int
  accessibility   Int
  seo             Int
  bestPractices   Int
  lcp             Float?
  cls             Float?
  inp             Float?

  details         HistoryDetails?
  
  // Add user relation
  userId          String?
  user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HistoryDetails {
  id            Int     @id @default(autoincrement())
  historyId     Int     @unique
  lhr           Json

  history       History @relation(fields: [historyId], references: [id], onDelete: Cascade)
}

model AIInsight {
  id              String   @id @default(cuid())
  url             String
  title           String
  description     String
  severity        String   // 'High', 'Medium', 'Low'
  category        String   // 'Performance', 'Accessibility', 'SEO', 'Best Practices', 'Web Vitals'
  actionable      Boolean  @default(true)
  estimatedImpact String
  priority        Int      @default(5)
  status          String   @default("pending") // 'pending', 'applied', 'ignored'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Add user relation
  userId          String?
  user            User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([url])
  @@index([status])
  @@index([severity])
  @@index([category])
}